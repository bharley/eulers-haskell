module Blake.Eulers.Problem028 where

answer = sum $ diagonals $ cubeLayers 1001

-- Given a list of cube layers generated by cubeLayers, returns a list of the diagonals from the center
diagonals ((n:[]):[]) = [n]
diagonals cube        = (diagonals $ init cube) ++ map (layer !!) [start,(start + undim)..(l - 1)]
  where layer = last cube
        l     = length layer
        undim = ((div l 8) * 2)
        start = undim - 1

-- Generates the "layers" of a cube spiraling clockwise from the center
-- Note that `n` must be odd
cubeLayers :: Integral a => a -> [[a]]
cubeLayers 1 = [[1]]
cubeLayers n = prev ++ [[start..end]]
  where prev  = cubeLayers (n - 2)
        dim   = (div n 2) * 8
        start = ((+1) . last . last) prev
        end   = (start + dim) - 1